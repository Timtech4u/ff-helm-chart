// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/argoproj/argo-cd/v2/pkg/apiclient

package apiclient

import "crypto/tls"

#MetaDataTokenKey: "token"

// EnvArgoCDServer is the environment variable to look for an Argo CD server address
#EnvArgoCDServer: "ARGOCD_SERVER"

// EnvArgoCDAuthToken is the environment variable to look for an Argo CD auth token
#EnvArgoCDAuthToken: "ARGOCD_AUTH_TOKEN"

// EnvArgoCDgRPCMaxSizeMB is the environment variable to look for a max gRPC message size
#EnvArgoCDgRPCMaxSizeMB: "ARGOCD_GRPC_MAX_SIZE_MB"

// Client defines an interface for interaction with an Argo CD server.
#Client: _

// ClientOptions hold address, security, and other settings for the API client.
#ClientOptions: {
	ServerAddr:           string
	PlainText:            bool
	Insecure:             bool
	CertFile:             string
	ClientCertFile:       string
	ClientCertKeyFile:    string
	AuthToken:            string
	ConfigPath:           string
	Context:              string
	UserAgent:            string
	GRPCWeb:              bool
	GRPCWebRootPath:      string
	Core:                 bool
	PortForward:          bool
	PortForwardNamespace: string
	Headers: [...string] @go(,[]string)
	HttpRetryMax: int
}

_#client: {
	ServerAddr:      string
	PlainText:       bool
	Insecure:        bool
	CertPEMData:     bytes                   @go(,[]byte)
	ClientCert?:     null | tls.#Certificate @go(,*tls.Certificate)
	AuthToken:       string
	RefreshToken:    string
	UserAgent:       string
	GRPCWeb:         bool
	GRPCWebRootPath: string
	Headers: [...string] @go(,[]string)
}

// JwtCredentials implements the gRPC credentials.Credentials interface which we is used to do
// grpc.WithPerRPCCredentials(), for authentication
_#jwtCredentials: {
	Token: string
}
